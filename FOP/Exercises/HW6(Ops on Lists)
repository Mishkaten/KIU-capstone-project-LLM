This assignment is concerned with the realization of simple list operations. An implementation of lists themselves is already contained in the given template. Our tests assume that the list implementation you use correctly realizes the corresponding methods. Since this assignment is about lists, you are not allowed to use arrays here (upto the array in the parameter for merging multiple lists).

Assumptions on the input

all values are from the range 0 <= x < 1000

the length of lists is bounded by maximally 10000 elements

Merging of multiple lists

Merge k (increasingly) sorted lists into one and return the resulting sorted list. Your implementation must be able to handle k up to 10.000. Your implementation may achieve higher esteem if it can handle more lists!

Merging of lists 0 of 1 tests passing

Input:
{
  1->4->5,
  1->3->4,
  2->6
}
Output: 1->1->2->3->4->4->5->6


Re-arranging lists

You receive a list together with an element x. The goal is to rearrange the list in such a way that all elements strictly less than x are in front of all elements which are equal or greater than x. Thereby, the ordering of elements in each of these two portions of the list should remain unchanged.

Re-arranging lists 0 of 1 tests passing

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5


Permuting Lists

You receive a list with n + 1 elements:

head = x0 -> x1  -> x2 -> ... -> xn


You are meant to return a list with permuted elements according to the pattern:

head = x0 -> xn -> x1 -> x{n-1} -> ... 


Permuting Lists 0 of 1 tests passing

Input: head = 1->2->3->4->5
Output: head = 1->5->2->4->3


Input: head = 1->2->3->4
Output: head = 1->4->2->3
