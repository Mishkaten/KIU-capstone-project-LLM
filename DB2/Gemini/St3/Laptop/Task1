Understanding Write Skew
A write skew occurs when two transactions concurrently read the same data, then update different parts of it based on their initial read. If both updates were allowed, it would violate the database's consistency rules. In our example, if Alice and Bob were both allowed to remove themselves from duty simultaneously, it would result in zero people on duty, violating the constraint of having at least two people on duty.
PostgreSQL's SSI Behavior
	1	Transaction Start: Both Alice and Bob start their transactions under SSI.
	2	Read: Both transactions read the current state of the duty list (Alice, Bob, Joe, Susan).
	3	Write (Potential Conflict):
	◦	Alice's transaction tries to remove Alice from the list.
	◦	Bob's transaction tries to remove Bob from the list.
	4	Serialization Error: PostgreSQL's SSI mechanism detects that these writes would result in an invalid state (zero people on duty). It will choose one transaction (either Alice's or Bob's) to abort and roll back.
	5	Successful Commit: The other transaction will be allowed to commit successfully, updating the duty list accordingly.
Determining Which Transaction Aborts
PostgreSQL will choose one transaction to abort based on factors like transaction start time, the order in which the writes were attempted, and other internal heuristics. It's generally not deterministic which transaction will be chosen.
Code Example (Illustrative)
SQL
-- Session 1 (Alice)
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT * FROM duty_list;  -- Shows Alice, Bob, Joe, Susan
DELETE FROM duty_list WHERE name = 'Alice';

-- Session 2 (Bob)
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT * FROM duty_list; -- Shows Alice, Bob, Joe, Susan 
DELETE FROM duty_list WHERE name = 'Bob';
Use code with caution.



One of these transactions will encounter a serialization_failure error and roll back.
Xmin and Xmax Values
After the successful commit, the updated row in the duty_list table (either with Bob or Alice removed) will have a new Xmax value corresponding to the transaction ID of the successful transaction. The Xmin value might remain the same if no previous versions of the row were deleted.
Key Points
	•	Serialization Error: A serialization error will be thrown in one of the transactions.
	•	Transactions Do Not Follow Each Other: The transactions run concurrently, but one is forced to roll back due to the conflict.
	•	Xmin, Xmax: The committed transaction will have its transaction ID reflected in the Xmax of the updated row.
