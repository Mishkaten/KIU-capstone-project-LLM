Hypothesis:
Postgres SSI will detect a potential write skew and abort one of the transactions (either Alice's or Bob's).
SQL Code and Verification:
Here's how you can test this in two Postgres sessions:
Session 1 (Alice):
SQL
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT txid_current();  -- Get transaction ID for Alice

-- Assume table "duty" with columns (id, name)

DELETE FROM duty WHERE name = 'Alice'; -- Alice gets off duty

SELECT * FROM duty;

COMMIT;
Use code with caution.
content_copy
Session 2 (Bob):
SQL
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT txid_current();  -- Get transaction ID for Bob

DELETE FROM duty WHERE name = 'Bob';  -- Bob gets off duty

SELECT * FROM duty;

COMMIT;
Use code with caution.
content_copy
Observations:
	•	One of the transactions will fail with a serialization_failure error. This is Postgres SSI detecting the write skew.
	•	The other transaction will succeed, and its changes will be committed.
	•	If you run SELECT * FROM duty; in a new session, you'll see that only two people remain on duty (either Alice and Joe, or Bob and Joe, depending on which transaction was aborted).
Showing xmin and xmax:
After one transaction has committed, you can examine the system columns xmin and xmax to see the transaction IDs involved:
SQL
SELECT xmin, xmax, * FROM duty;
Use code with caution.
content_copy
Explanation of xmin and xmax:
	•	xmin: The transaction ID that created the current row version.
	•	xmax:
	◦	If the row version is still current (not deleted), xmax is 0.
	◦	If the row version has been deleted or updated, xmax is the transaction ID of the transaction that made the change.
Example Output (Illustrative):
Let's say Alice's transaction (with txid_current() returning 1234) was aborted, and Bob's transaction (with txid_current() returning 5678) succeeded. You might see something like this:
 xmin | xmax | id | name
------+------+----+------
 1234 | 5678 | 1  | Alice  -- Deleted by Bob's transaction (5678)
 5678 | 0    | 2  | Bob    -- Deleted by Bob's transaction (5678)
 1234 | 0    | 3  | Joe
 1234 | 0    | 4  | Susan 
Key Takeaways:
	•	Postgres SSI effectively prevents write skew anomalies by aborting transactions that would lead to inconsistent states.
	•	The xmin and xmax system columns provide valuable information about which transactions created and modified row versions.
	•	In practice, applications should be prepared to handle serialization failures and retry transactions gracefully.


tuneshare

more_vert

