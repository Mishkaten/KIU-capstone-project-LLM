Hypothesis:
Postgres SSI will detect a potential write skew and abort one of the transactions (either Alice's or Bob's).
SQL Code and Verification:
Here's how you can test this in two Postgres sessions:
Session 1 (Alice):
SQL
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT txid_current();  -- Get transaction ID for Alice

-- Assume table "duty" with columns (id, name)

DELETE FROM duty WHERE name = 'Alice'; -- Alice gets off duty

SELECT * FROM duty;

COMMIT;
Use code with caution.
content_copy
Session 2 (Bob):
SQL
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT txid_current();  -- Get transaction ID for Bob

DELETE FROM duty WHERE name = 'Bob';  -- Bob gets off duty

SELECT * FROM duty;

COMMIT;
Use code with caution.
content_copy
Observations:
	•	One of the transactions will fail with a serialization_failure error. This is Postgres SSI detecting the write skew.
	•	The other transaction will succeed, and its changes will be committed.
	•	If you run SELECT * FROM duty; in a new session, you'll see that only two people remain on duty (either Alice and Joe, or Bob and Joe, depending on which transaction was aborted).
Showing xmin and xmax:
After one transaction has committed, you can examine the system columns xmin and xmax to see the transaction IDs involved:
SQL
SELECT xmin, xmax, * FROM duty;
Use code with caution.
content_copy
Explanation of xmin and xmax:
	•	xmin: The transaction ID that created the current row version.
	•	xmax:
	◦	If the row version is still current (not deleted), xmax is 0.
	◦	If the row version has been deleted or updated, xmax is the transaction ID of the transaction that made the change.
Example Output (Illustrative):
Let's say Alice's transaction (with txid_current() returning 1234) was aborted, and Bob's transaction (with txid_current() returning 5678) succeeded. You might see something like this:
 xmin | xmax | id | name
------+------+----+------
 1234 | 5678 | 1  | Alice  -- Deleted by Bob's transaction (5678)
 5678 | 0    | 2  | Bob    -- Deleted by Bob's transaction (5678)
 1234 | 0    | 3  | Joe
 1234 | 0    | 4  | Susan 
Assuming PostgreSQL chooses to abort Bob's transaction to resolve the write skew, here's the breakdown:
Serialization Error:
	•	Yes, a serialization error was thrown. Specifically, Bob's transaction encountered a serialization_failure error due to the write skew conflict with Alice's transaction.
Transaction Order:
	•	The transactions do not strictly follow each other. They execute concurrently, but SSI detects the potential conflict and intervenes before both commits are finalized.
Commits and Rollbacks:
	•	Alice's transaction commits successfully. Her change to remove herself from the duty list is applied.
	•	Bob's transaction rolls back. His attempted change to remove himself is discarded, and the database state is restored to how it was before his transaction began.
Xmin and Xmax Values:
	•	Xmin: The xmin value of the relevant row(s) in the duty_list table may remain unchanged if no rows were deleted before the conflict. It represents the transaction ID of the transaction that originally inserted or last modified the row.
	•	Xmax: After Alice's commit, the xmax value of the updated row (where Alice is removed) will be updated to the transaction ID of Alice's transaction. This indicates that her transaction was the last to modify the row.
Caveats:
	•	It's important to note that the choice of which transaction to abort (Alice or Bob) is not deterministic. PostgreSQL's internal algorithms could have chosen to abort Alice's transaction instead.
	•	This analysis assumes a simplified scenario with only two concurrent transactions. In more complex cases, multiple conflicts could arise, and the resolution might involve cascading rollbacks. pen_spark    
